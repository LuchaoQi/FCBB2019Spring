numberOfMu = c()
for(i in 1:1000) {
newTemp = tempMatrix
newTemp[1, ] = sample(newTemp[1, ])
newTemp = newTemp[, !(newTemp[1, ] == 0 & newTemp[2, ] == 0)]
c_occurance = sum(newTemp[1, ] == newTemp[2, ])
m_exclusive = ncol(newTemp) - c_occurance
numberOfCo = c(numberOfCo, c_occurance)
numberOfMu = c(numberOfMu, m_exclusive)
}
returnArray = c(as.numeric(quantile(numberOfCo, probs = 0.95)), as.numeric(quantile(numberOfMu, probs = 0.95)))
#return
returnArray
}
mySummary = binomial_conversion(myTable)
write.csv(mySummary, file = "bigSummaryDf_GBM.csv")
library(stringr)
library(doParallel)
#setup parallel backend to use many processors
cores=detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
#setwd("C:/Users/Dan/Dropbox (CahanLab)/Foundation_FinalProject")
setwd("/Users/apple/Desktop/Foundations of Computational Biology and Bioinformatics/FCBB2019Spring/cleanedData")
myTable = read.csv("encodedLGG.csv") # change this to appropriate file name
rownames(myTable) = myTable$X
myTable$X = NULL
permutateNull_sigParallel <- function(tempMatrix) {
numberOfCo = c()
numberOfMu = c()
parallelTest <- foreach(icount(500), .combine=cbind) %dopar% {
newTemp = tempMatrix
newTemp[1, ] = sample(newTemp[1, ])
newTemp = newTemp[, !(newTemp[1, ] == 0 & newTemp[2, ] == 0)]
c_occurance = sum(newTemp[1, ] == newTemp[2, ])
c_occurance
}
parallelTest = as.vector(parallelTest[1, ])
#returnNum = as.numeric(quantile(parallelTest, probs = 0.95))
#return
parallelTest
#returnNum
}
binomial_conversion <- function(myTable) {
driverGenes = rownames(myTable)
bigSummaryDf = data.frame(gene1 = NULL, gene2 = NULL, co_occurance = NULL, mutual_exclusion = NULL, co_cut = NULL, pval = NULL)
for(index1 in 1:length(driverGenes)) {
for(index2 in 1:length(driverGenes)) {
if (index2 > index1 ) {
gene1 = driverGenes[index1]
gene2 = driverGenes[index2]
tempMatrix = myTable[c(gene1, gene2), ]
# filter out incidence where everything is 0
tempMatrix = tempMatrix[, !(tempMatrix[1, ] == 0 & tempMatrix[2, ] == 0)]
c_occurance = sum(tempMatrix[1, ] == tempMatrix[2, ])
m_exclusive = ncol(tempMatrix) - c_occurance
#sigCutoff = permutateNull_sigParallel(tempMatrix)
permuteSeq = permutateNull_sigParallel(tempMatrix)
sigCutoff = as.numeric(quantile(permuteSeq, probs = 0.95))
pval = sum(permuteSeq >= c_occurance) / length(permuteSeq)
fillerDf = data.frame(gene1 = gene1, gene2 = gene2, co_occurance = c_occurance, mutual_exclusion = m_exclusive, co_cut = sigCutoff, pval = pval)
bigSummaryDf = rbind(bigSummaryDf, fillerDf)
print(fillerDf)
}
}
}
#return
bigSummaryDf
}
permutateNull_sig <- function(tempMatrix) {
numberOfCo = c()
numberOfMu = c()
for(i in 1:1000) {
newTemp = tempMatrix
newTemp[1, ] = sample(newTemp[1, ])
newTemp = newTemp[, !(newTemp[1, ] == 0 & newTemp[2, ] == 0)]
c_occurance = sum(newTemp[1, ] == newTemp[2, ])
m_exclusive = ncol(newTemp) - c_occurance
numberOfCo = c(numberOfCo, c_occurance)
numberOfMu = c(numberOfMu, m_exclusive)
}
returnArray = c(as.numeric(quantile(numberOfCo, probs = 0.95)), as.numeric(quantile(numberOfMu, probs = 0.95)))
#return
returnArray
}
mySummary = binomial_conversion(myTable)
write.csv(mySummary, file = "bigSummaryDf_GBM.csv")
library(stringr)
library(doParallel)
#setup parallel backend to use many processors
cores=detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
#setwd("C:/Users/Dan/Dropbox (CahanLab)/Foundation_FinalProject")
setwd("/Users/apple/Desktop/Foundations of Computational Biology and Bioinformatics/FCBB2019Spring/cleanedData")
myTable = read.csv("encodedGBM.csv") # change this to appropriate file name
rownames(myTable) = myTable$X
myTable$X = NULL
permutateNull_sigParallel <- function(tempMatrix) {
numberOfCo = c()
numberOfMu = c()
parallelTest <- foreach(icount(500), .combine=cbind) %dopar% {
newTemp = tempMatrix
newTemp[1, ] = sample(newTemp[1, ])
newTemp = newTemp[, !(newTemp[1, ] == 0 & newTemp[2, ] == 0)]
c_occurance = sum(newTemp[1, ] == newTemp[2, ])
c_occurance
}
parallelTest = as.vector(parallelTest[1, ])
#returnNum = as.numeric(quantile(parallelTest, probs = 0.95))
#return
parallelTest
#returnNum
}
binomial_conversion <- function(myTable) {
driverGenes = rownames(myTable)
bigSummaryDf = data.frame(gene1 = NULL, gene2 = NULL, co_occurance = NULL, mutual_exclusion = NULL, co_cut = NULL, pval = NULL)
for(index1 in 1:length(driverGenes)) {
for(index2 in 1:length(driverGenes)) {
if (index2 > index1 ) {
gene1 = driverGenes[index1]
gene2 = driverGenes[index2]
tempMatrix = myTable[c(gene1, gene2), ]
# filter out incidence where everything is 0
tempMatrix = tempMatrix[, !(tempMatrix[1, ] == 0 & tempMatrix[2, ] == 0)]
c_occurance = sum(tempMatrix[1, ] == tempMatrix[2, ])
m_exclusive = ncol(tempMatrix) - c_occurance
#sigCutoff = permutateNull_sigParallel(tempMatrix)
permuteSeq = permutateNull_sigParallel(tempMatrix)
sigCutoff = as.numeric(quantile(permuteSeq, probs = 0.95))
pval = sum(permuteSeq >= c_occurance) / length(permuteSeq)
fillerDf = data.frame(gene1 = gene1, gene2 = gene2, co_occurance = c_occurance, mutual_exclusion = m_exclusive, co_cut = sigCutoff, pval = pval)
bigSummaryDf = rbind(bigSummaryDf, fillerDf)
print(fillerDf)
}
}
}
#return
bigSummaryDf
}
permutateNull_sig <- function(tempMatrix) {
numberOfCo = c()
numberOfMu = c()
for(i in 1:1000) {
newTemp = tempMatrix
newTemp[1, ] = sample(newTemp[1, ])
newTemp = newTemp[, !(newTemp[1, ] == 0 & newTemp[2, ] == 0)]
c_occurance = sum(newTemp[1, ] == newTemp[2, ])
m_exclusive = ncol(newTemp) - c_occurance
numberOfCo = c(numberOfCo, c_occurance)
numberOfMu = c(numberOfMu, m_exclusive)
}
returnArray = c(as.numeric(quantile(numberOfCo, probs = 0.95)), as.numeric(quantile(numberOfMu, probs = 0.95)))
#return
returnArray
}
mySummary = binomial_conversion(myTable)
library(discover)
setwd("/Users/apple/Desktop/Foundations of Computational Biology and Bioinformatics/FCBB2019Spring/cleanedData")
myTab = read.csv("encodedLGG.csv")
rownames(myTab) = myTab$X
myTab$X = NULL
events <- discover.matrix(myTab)
result.mutex <- pairwise.discover.test(events)
print(result.mutex, fdr.threshold=0.08)
as.data.frame(result.mutex, q.threshold = 0.08)
library(discover)
setwd("/Users/apple/Desktop/Foundations of Computational Biology and Bioinformatics/FCBB2019Spring/cleanedData")
myTab = read.csv("encodedLGG.csv")
rownames(myTab) = myTab$X
myTab$X = NULL
events <- discover.matrix(myTab)
result.mutex <- pairwise.discover.test(events)
print(result.mutex, fdr.threshold=0.08)
as.data.frame(result.mutex, q.threshold = 0.08)
library(discover)
setwd("/Users/apple/Desktop/Foundations of Computational Biology and Bioinformatics/FCBB2019Spring/cleanedData")
myTab = read.csv("encodedLGG.csv")
rownames(myTab) = myTab$X
myTab$X = NULL
events <- discover.matrix(myTab)
result.mutex <- pairwise.discover.test(events)
print(result.mutex, fdr.threshold=0.08)
as.data.frame(result.mutex, q.threshold = 0.08)
library(discover)
setwd("/Users/apple/Desktop/Foundations of Computational Biology and Bioinformatics/FCBB2019Spring/cleanedData")
myTab = read.csv("encodedGBM.csv")
rownames(myTab) = myTab$X
myTab$X = NULL
events <- discover.matrix(myTab)
result.mutex <- pairwise.discover.test(events)
print(result.mutex, fdr.threshold=0.08)
as.data.frame(result.mutex, q.threshold = 0.08)
library(discover)
setwd("/Users/apple/Desktop/Foundations of Computational Biology and Bioinformatics/FCBB2019Spring/cleanedData")
myTab = read.csv("encodedGBM.csv")
rownames(myTab) = myTab$X
myTab$X = NULL
events <- discover.matrix(myTab)
result.mutex <- pairwise.discover.test(events)
print(result.mutex, fdr.threshold=0.08)
as.data.frame(result.mutex, q.threshold = 0.08)
library(discover)
setwd("/Users/apple/Desktop/Foundations of Computational Biology and Bioinformatics/FCBB2019Spring/cleanedData/")
myTab = read.csv("encodedGBM.csv")
rownames(myTab) = myTab$X
myTab$X = NULL
events <- discover.matrix(myTab)
result.mutex <- pairwise.discover.test(events)
print(result.mutex, fdr.threshold=0.08)
as.data.frame(result.mutex, q.threshold = 0.08)
library(stringr)
library(doParallel)
#setup parallel backend to use many processors
cores=detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
#setwd("C:/Users/Dan/Dropbox (CahanLab)/Foundation_FinalProject")
setwd("/Users/apple/Desktop/Foundations of Computational Biology and Bioinformatics/FCBB2019Spring/cleanedData")
myTable = read.csv("encodedGBM.csv") # change this to appropriate file name
rownames(myTable) = myTable$X
myTable$X = NULL
permutateNull_sigParallel <- function(tempMatrix) {
numberOfCo = c()
numberOfMu = c()
parallelTest <- foreach(icount(500), .combine=cbind) %dopar% {
newTemp = tempMatrix
newTemp[1, ] = sample(newTemp[1, ])
newTemp = newTemp[, !(newTemp[1, ] == 0 & newTemp[2, ] == 0)]
c_occurance = sum(newTemp[1, ] == newTemp[2, ])
c_occurance
}
parallelTest = as.vector(parallelTest[1, ])
#returnNum = as.numeric(quantile(parallelTest, probs = 0.95))
#return
parallelTest
#returnNum
}
binomial_conversion <- function(myTable) {
driverGenes = rownames(myTable)
bigSummaryDf = data.frame(gene1 = NULL, gene2 = NULL, co_occurance = NULL, mutual_exclusion = NULL, co_cut = NULL, pval = NULL)
for(index1 in 1:length(driverGenes)) {
for(index2 in 1:length(driverGenes)) {
if (index2 > index1 ) {
gene1 = driverGenes[index1]
gene2 = driverGenes[index2]
tempMatrix = myTable[c(gene1, gene2), ]
# filter out incidence where everything is 0
tempMatrix = tempMatrix[, !(tempMatrix[1, ] == 0 & tempMatrix[2, ] == 0)]
c_occurance = sum(tempMatrix[1, ] == tempMatrix[2, ])
m_exclusive = ncol(tempMatrix) - c_occurance
#sigCutoff = permutateNull_sigParallel(tempMatrix)
permuteSeq = permutateNull_sigParallel(tempMatrix)
sigCutoff = as.numeric(quantile(permuteSeq, probs = 0.95))
pval = sum(permuteSeq >= c_occurance) / length(permuteSeq)
fillerDf = data.frame(gene1 = gene1, gene2 = gene2, co_occurance = c_occurance, mutual_exclusion = m_exclusive, co_cut = sigCutoff, pval = pval)
bigSummaryDf = rbind(bigSummaryDf, fillerDf)
print(fillerDf)
}
}
}
#return
bigSummaryDf
}
permutateNull_sig <- function(tempMatrix) {
numberOfCo = c()
numberOfMu = c()
for(i in 1:1000) {
newTemp = tempMatrix
newTemp[1, ] = sample(newTemp[1, ])
newTemp = newTemp[, !(newTemp[1, ] == 0 & newTemp[2, ] == 0)]
c_occurance = sum(newTemp[1, ] == newTemp[2, ])
m_exclusive = ncol(newTemp) - c_occurance
numberOfCo = c(numberOfCo, c_occurance)
numberOfMu = c(numberOfMu, m_exclusive)
}
returnArray = c(as.numeric(quantile(numberOfCo, probs = 0.95)), as.numeric(quantile(numberOfMu, probs = 0.95)))
#return
returnArray
}
mySummary = binomial_conversion(myTable)
library(stringr)
library(doParallel)
#setup parallel backend to use many processors
cores=detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
#setwd("C:/Users/Dan/Dropbox (CahanLab)/Foundation_FinalProject")
setwd("/Users/apple/Desktop/Foundations of Computational Biology and Bioinformatics/FCBB2019Spring/cleanedData")
myTable = read.csv("encodedLGG.csv") # change this to appropriate file name
rownames(myTable) = myTable$X
myTable$X = NULL
permutateNull_sigParallel <- function(tempMatrix) {
numberOfCo = c()
numberOfMu = c()
parallelTest <- foreach(icount(500), .combine=cbind) %dopar% {
newTemp = tempMatrix
newTemp[1, ] = sample(newTemp[1, ])
newTemp = newTemp[, !(newTemp[1, ] == 0 & newTemp[2, ] == 0)]
c_occurance = sum(newTemp[1, ] == newTemp[2, ])
c_occurance
}
parallelTest = as.vector(parallelTest[1, ])
#returnNum = as.numeric(quantile(parallelTest, probs = 0.95))
#return
parallelTest
#returnNum
}
binomial_conversion <- function(myTable) {
driverGenes = rownames(myTable)
bigSummaryDf = data.frame(gene1 = NULL, gene2 = NULL, co_occurance = NULL, mutual_exclusion = NULL, co_cut = NULL, pval = NULL)
for(index1 in 1:length(driverGenes)) {
for(index2 in 1:length(driverGenes)) {
if (index2 > index1 ) {
gene1 = driverGenes[index1]
gene2 = driverGenes[index2]
tempMatrix = myTable[c(gene1, gene2), ]
# filter out incidence where everything is 0
tempMatrix = tempMatrix[, !(tempMatrix[1, ] == 0 & tempMatrix[2, ] == 0)]
c_occurance = sum(tempMatrix[1, ] == tempMatrix[2, ])
m_exclusive = ncol(tempMatrix) - c_occurance
#sigCutoff = permutateNull_sigParallel(tempMatrix)
permuteSeq = permutateNull_sigParallel(tempMatrix)
sigCutoff = as.numeric(quantile(permuteSeq, probs = 0.95))
pval = sum(permuteSeq >= c_occurance) / length(permuteSeq)
fillerDf = data.frame(gene1 = gene1, gene2 = gene2, co_occurance = c_occurance, mutual_exclusion = m_exclusive, co_cut = sigCutoff, pval = pval)
bigSummaryDf = rbind(bigSummaryDf, fillerDf)
print(fillerDf)
}
}
}
#return
bigSummaryDf
}
permutateNull_sig <- function(tempMatrix) {
numberOfCo = c()
numberOfMu = c()
for(i in 1:1000) {
newTemp = tempMatrix
newTemp[1, ] = sample(newTemp[1, ])
newTemp = newTemp[, !(newTemp[1, ] == 0 & newTemp[2, ] == 0)]
c_occurance = sum(newTemp[1, ] == newTemp[2, ])
m_exclusive = ncol(newTemp) - c_occurance
numberOfCo = c(numberOfCo, c_occurance)
numberOfMu = c(numberOfMu, m_exclusive)
}
returnArray = c(as.numeric(quantile(numberOfCo, probs = 0.95)), as.numeric(quantile(numberOfMu, probs = 0.95)))
#return
returnArray
}
mySummary = binomial_conversion(myTable)
write.csv(mySummary, file = "bigSummaryDf_GBM.csv")
library(stringr)
library(doParallel)
#setup parallel backend to use many processors
cores=detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
registerDoParallel(cl)
#setwd("C:/Users/Dan/Dropbox (CahanLab)/Foundation_FinalProject")
setwd("/Users/apple/Desktop/Foundations of Computational Biology and Bioinformatics/FCBB2019Spring/cleanedData")
myTable = read.csv("encodedLGG.csv") # change this to appropriate file name
rownames(myTable) = myTable$X
myTable$X = NULL
permutateNull_sigParallel <- function(tempMatrix) {
numberOfCo = c()
numberOfMu = c()
parallelTest <- foreach(icount(500), .combine=cbind) %dopar% {
newTemp = tempMatrix
newTemp[1, ] = sample(newTemp[1, ])
newTemp = newTemp[, !(newTemp[1, ] == 0 & newTemp[2, ] == 0)]
c_occurance = sum(newTemp[1, ] == newTemp[2, ])
c_occurance
}
parallelTest = as.vector(parallelTest[1, ])
#returnNum = as.numeric(quantile(parallelTest, probs = 0.95))
#return
parallelTest
#returnNum
}
binomial_conversion <- function(myTable) {
driverGenes = rownames(myTable)
bigSummaryDf = data.frame(gene1 = NULL, gene2 = NULL, co_occurance = NULL, mutual_exclusion = NULL, co_cut = NULL, pval = NULL)
for(index1 in 1:length(driverGenes)) {
for(index2 in 1:length(driverGenes)) {
if (index2 > index1 ) {
gene1 = driverGenes[index1]
gene2 = driverGenes[index2]
tempMatrix = myTable[c(gene1, gene2), ]
# filter out incidence where everything is 0
tempMatrix = tempMatrix[, !(tempMatrix[1, ] == 0 & tempMatrix[2, ] == 0)]
c_occurance = sum(tempMatrix[1, ] == tempMatrix[2, ])
m_exclusive = ncol(tempMatrix) - c_occurance
#sigCutoff = permutateNull_sigParallel(tempMatrix)
permuteSeq = permutateNull_sigParallel(tempMatrix)
sigCutoff = as.numeric(quantile(permuteSeq, probs = 0.95))
pval = sum(permuteSeq >= c_occurance) / length(permuteSeq)
fillerDf = data.frame(gene1 = gene1, gene2 = gene2, co_occurance = c_occurance, mutual_exclusion = m_exclusive, co_cut = sigCutoff, pval = pval)
bigSummaryDf = rbind(bigSummaryDf, fillerDf)
print(fillerDf)
}
}
}
#return
bigSummaryDf
}
permutateNull_sig <- function(tempMatrix) {
numberOfCo = c()
numberOfMu = c()
for(i in 1:1000) {
newTemp = tempMatrix
newTemp[1, ] = sample(newTemp[1, ])
newTemp = newTemp[, !(newTemp[1, ] == 0 & newTemp[2, ] == 0)]
c_occurance = sum(newTemp[1, ] == newTemp[2, ])
m_exclusive = ncol(newTemp) - c_occurance
numberOfCo = c(numberOfCo, c_occurance)
numberOfMu = c(numberOfMu, m_exclusive)
}
returnArray = c(as.numeric(quantile(numberOfCo, probs = 0.95)), as.numeric(quantile(numberOfMu, probs = 0.95)))
#return
returnArray
}
mySummary = binomial_conversion(myTable)
write.csv(mySummary, file = "bigSummaryDf_LGG.csv")
library(discover)
setwd("/Users/apple/Desktop/Foundations of Computational Biology and Bioinformatics/FCBB2019Spring/cleanedData")
myTab = read.csv("encodedLGG.csv")
rownames(myTab) = myTab$X
myTab$X = NULL
events <- discover.matrix(myTab)
result.mutex <- pairwise.discover.test(events)
print(result.mutex, fdr.threshold=0.08)
as.data.frame(result.mutex, q.threshold = 0.08)
size(events)
library(discover)
setwd("/Users/apple/Desktop/Foundations of Computational Biology and Bioinformatics/FCBB2019Spring/cleanedData")
myTab = read.csv("encodedLGG.csv")
rownames(myTab) = myTab$X
myTab$X = NULL
events <- discover.matrix(myTab)
result.mutex <- pairwise.discover.test(events)
print(result.mutex, fdr.threshold=0.08)
as.data.frame(result.mutex, q.threshold = 0.08)
View(myTab)
events <- discover.matrix(myTab)
library(matrixStats)
library(discover)
cancerList = c("BLCA")
for(myCancer in cancerList) {
setwd(paste0("/Users/apple/Desktop/Foundations of Computational Biology and Bioinformatics/FCBB2019Spring/", myCancer, "/"))
#myTab = read.csv(paste0("encoded", myCancer, ".csv")) # change this to appropriate file name
myTab = read.csv(paste0("updated_encoding_", myCancer, ".csv")) # change this to appropriate file name
rownames(myTab) = myTab$X
myTab$X = NULL
events <- discover.matrix(myTab)
result.mutex <- pairwise.discover.test(events)
print(result.mutex, fdr.threshold=0.05)
as.data.frame(result.mutex, q.threshold = 0.05)
file_n = paste0(myCancer, "_mut.csv")
print(paste0(myCancer, "_mut.csv"))
write.csv(x = resultsTable, file = file_n)
}
print(as.data.frame(result.mutex, q.threshold = 0.08))
library(matrixStats)
library(discover)
cancerList = c("BLCA")
for(myCancer in cancerList) {
setwd(paste0("/Users/apple/Desktop/Foundations of Computational Biology and Bioinformatics/FCBB2019Spring/", myCancer, "/"))
#myTab = read.csv(paste0("encoded", myCancer, ".csv")) # change this to appropriate file name
myTab = read.csv(paste0("updated_encoding_", myCancer, ".csv")) # change this to appropriate file name
rownames(myTab) = myTab$X
myTab$X = NULL
events <- discover.matrix(myTab)
result.mutex <- pairwise.discover.test(events)
print(result.mutex, fdr.threshold=0.08)
resultsTable = as.data.frame(result.mutex, q.threshold = 0.08)
file_n = paste0(myCancer, "_mut.csv")
print(paste0(myCancer, "_mut.csv"))
write.csv(x = resultsTable, file = file_n)
}
cancerList = c("BRCA", "GBM", "LAML", "LGG", "LIHC", "KIRP", "KIRC", "CESC", "STAD", "SKCM", "SARC", "PAAD", "LUSC", "LUAD", "UCEC")
for(myCancer in cancerList) {
setwd(paste0("/Users/apple/Desktop/Foundations of Computational Biology and Bioinformatics/FCBB2019Spring/", myCancer, "/"))
myTab = read.csv(paste0("encoded", myCancer, ".csv")) # change this to appropriate file name
#myTab = read.csv(paste0("updated_encoding_", myCancer, ".csv")) # change this to appropriate file name
rownames(myTab) = myTab$X
myTab$X = NULL
events <- discover.matrix(myTab)
result.mutex <- pairwise.discover.test(events)
print(result.mutex, fdr.threshold=0.08)
resultsTable = as.data.frame(result.mutex, q.threshold = 0.08)
file_n = paste0(myCancer, "_mut.csv")
print(paste0(myCancer, "_mut.csv"))
write.csv(x = resultsTable, file = file_n)
}
library(matrixStats)
library(discover)
cancerList = c("BRCA", "GBM", "LAML", "LGG", "LIHC", "KIRP", "KIRC", "CESC", "STAD", "SKCM", "SARC", "PAAD", "LUSC", "LUAD", "UCEC")
#cancerList = c("BLCA")
for(myCancer in cancerList) {
setwd(paste0("/Users/apple/Desktop/Foundations of Computational Biology and Bioinformatics/FCBB2019Spring/", myCancer, "/"))
myTab = read.csv(paste0("encoded", myCancer, ".csv")) # change this to appropriate file name
#myTab = read.csv(paste0("updated_encoding_", myCancer, ".csv")) # change this to appropriate file name
rownames(myTab) = myTab$X
myTab$X = NULL
events <- discover.matrix(myTab)
result.mutex <- pairwise.discover.test(events)
print(result.mutex, fdr.threshold=0.05)
resultsTable = as.data.frame(result.mutex, q.threshold = 0.05)
file_n = paste0(myCancer, "_mut.csv")
print(paste0(myCancer, "_mut.csv"))
write.csv(x = resultsTable, file = file_n)
}
